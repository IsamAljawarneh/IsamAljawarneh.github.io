<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Isam Al Jawarneh</title>
    <link>https://IsamAljawarneh.github.io/post/</link>
      <atom:link href="https://IsamAljawarneh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2023 Isam Al Jawarneh</copyright><lastBuildDate>Thu, 01 Jul 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://IsamAljawarneh.github.io/media/icon_hud73ee2a58f6e166f5506c1763554804d_135107_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://IsamAljawarneh.github.io/post/</link>
    </image>
    
    <item>
      <title>Deploying &amp; Running Approximate Geospatial Query Processing at Scale on Microsoft Azure HDInsights</title>
      <link>https://IsamAljawarneh.github.io/post/getting-started/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://IsamAljawarneh.github.io/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;mark&gt;&lt;strong&gt;This tutorial shows an example of how to run an approximate geospatial stream processing application on an Azure HDInsights cluster deployed with Apache Spark and Kafka&lt;/strong&gt;&lt;/mark&gt;
&lt;ul&gt;
&lt;li&gt;you will learn how to:&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; create Azure HDInsight clusters deployed with Apache Spark &amp;amp; Kafka.&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; run an example dynamic application scenario common in smart city applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Azure subscription.&lt;/li&gt;
&lt;li&gt;basic knowledge of Jupyter Notebooks.&lt;/li&gt;
&lt;li&gt;basic knowledge of Scala programming language.&lt;/li&gt;
&lt;li&gt;basic knolwedge of Kafka topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Microsoft Azure Spark and Kafka HDInsight clusters need to be deployed within the same virtual network.
This tutorial exploits a template for this purpose. This allows the Spark cluster to communicate directly with Kafka.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;-click-here-to-continue-reading-the-full-tutorial-httpsisamaljawarnehgithubioapproximatestream&#34;&gt;&lt;a href=&#34;https://isamaljawarneh.github.io/ApproximateStream/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ðŸ““ Click here to continue reading the full &lt;code&gt;tutorial&lt;/code&gt; ðŸ““&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&#34;the-challenge&#34;&gt;The challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Large amounts of georeferenced data streams arrive daily to stream processing systems.
&lt;ul&gt;
&lt;li&gt;This is attributable to the overabundance of affordable IoT devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interested practitioners desire to exploit Internet of Things (IoT) data streams for strategic decision-making
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;However&lt;/code&gt;, mobility data are &lt;code&gt;highly skewed&lt;/code&gt; and their &lt;code&gt;arrival rates fluctuate&lt;/code&gt;. This nature poses an extra challenge on data stream processing systems, which are required in order to achieve pre-specified latency and accuracy goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Approximate Query Processing (AQP) over massively-arriving streams of geospatial data is becoming essential.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In this post, I will show you how to easily deploy and run an interactive QoS-aware framework in 
  &lt;i class=&#34;fab fa-microsoft  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Microsoft Azure, for performing AQP  approximate processing of geo-referenced mobility data, at scale with quality of service guarantees.
&lt;ul&gt;
&lt;li&gt;We will focus on stateful aggregations (e.g., &lt;code&gt;means&lt;/code&gt;, &lt;code&gt;counts&lt;/code&gt;) and &lt;code&gt;top-N&lt;/code&gt; queries.&lt;/li&gt;
&lt;li&gt;The example code has the ability to strike a plausible balance between latency and accuracy targets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The deployment includes Apache Spark Structured Streaming and Apcahe Kafka communicating directly within the premises of a virtual network.&lt;/li&gt;
&lt;li&gt;In short, geospatial AQP is esential for dynamic application scenarios prevalent in smart cities and urban informatics. The example we show in this post can deliver real accurate results in a timely manner, by employing a qualified QoS-aware geospatial startified-like online sampling method that we have designed.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
